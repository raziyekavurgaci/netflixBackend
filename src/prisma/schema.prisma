// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  avatar        String?
  roleId        String
  roleRelation  Role           @relation(fields: [roleId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          RoleType       @default(USER)
  watchlist     Watchlist[]
  subscriptions Subscription[]
  payments      Payment[]
}

model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      RoleType @unique
  users     User[]
}

model Content {
  id          String  @id @default(uuid())
  title       String
  description String?

  categoryId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  watchlist  Watchlist[]
  type       ContentType
  category   Category    @relation(fields: [categoryId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contents  Content[]
}

model Watchlist {
  id        String   @id @default(uuid())
  userId    String
  contentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  content   Content  @relation(fields: [contentId], references: [id])

  @@unique([userId, contentId])
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  Payment   Payment[]
  status    SubscriptionStatus
  plan      Plan               @relation(fields: [planId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  price         Float
  duration      Int
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Payment {
  id             String        @id @default(uuid())
  userId         String
  amount         Float
  subscriptionId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         PaymentStatus
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

enum ContentType {
  MOVIE
  SERIES
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RoleType {
  USER
  ADMIN
}
